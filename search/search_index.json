{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"projeto cloud 2024.2 por bruno zalcberg essa \u00e9 uma documenta\u00e7\u00e3o simples para o projeto da disciplina de Computa\u00e7\u00e3o em Nuvem a ideia central do trabalho \u00e9 o desenvolvimento de uma API simples e sua posterior integra\u00e7\u00e3o com o docker \ud83d\udc33 e a AWS \u2601\ufe0f voc\u00ea pode usar o menu lateral ou os bot\u00f5es no footer para navegar pelas p\u00e1ginas links \u00fateis: github docker hub","title":"home"},{"location":"#projeto-cloud-20242","text":"","title":"projeto cloud 2024.2"},{"location":"#por-bruno-zalcberg","text":"essa \u00e9 uma documenta\u00e7\u00e3o simples para o projeto da disciplina de Computa\u00e7\u00e3o em Nuvem a ideia central do trabalho \u00e9 o desenvolvimento de uma API simples e sua posterior integra\u00e7\u00e3o com o docker \ud83d\udc33 e a AWS \u2601\ufe0f voc\u00ea pode usar o menu lateral ou os bot\u00f5es no footer para navegar pelas p\u00e1ginas","title":"por bruno zalcberg"},{"location":"#links-uteis","text":"github docker hub","title":"links \u00fateis:"},{"location":"aws/deploy/","text":"hosteamento da API na AWS usando EKS o deploy da API criada na primeira etapa foi feito atrav\u00e9s da AWS, utilizando-se o EKS (Elastic Kubernetes Service). infraestrutura utilizada Amazon EKS : servi\u00e7o gerenciado de Kubernetes EC2 : inst\u00e2ncias para os nodes do cluster ELB : load-balancer para distribui\u00e7\u00e3o de tr\u00e1fego IAM : gerenciamento de permiss\u00f5es do cluster processo de implementa\u00e7\u00e3o voc\u00ea pode baixar os arquivos .yaml de deploy aqui . 1. prepara\u00e7\u00e3o do ambiente # cria\u00e7\u00e3o do cluster eksctl create cluster \\ --name dogfacts \\ --region us-east-1 \\ --node-type t3.small \\ --nodes 2 \\ --nodes-min 1 \\ --nodes-max 3 \\ --managed 2. deploy da aplica\u00e7\u00e3o a aplica\u00e7\u00e3o foi implantada usando o arquivo api-deploy.yaml : apiVersion: apps/v1 kind: Deployment metadata: name: projeto spec: replicas: 1 selector: matchLabels: app: projeto template: metadata: labels: app: projeto spec: containers: - name: projeto image: brunozalc/apicloud:latest ports: - containerPort: 8000 # readiness test readinessProbe: httpGet: path: / port: 8000 initialDelaySeconds: 10 periodSeconds: 5 # wait for database startupProbe: httpGet: path: / port: 8000 failureThreshold: 30 periodSeconds: 10 3. configura\u00e7\u00e3o do banco de dados o postgres tamb\u00e9m foi inicializado atrav\u00e9s de um arquivo postgres-deploy.yaml : apiVersion: apps/v1 kind: Deployment metadata: name: postgres spec: replicas: 1 selector: matchLabels: app: postgres template: metadata: labels: app: postgres spec: containers: - name: postgres image: postgres ports: - containerPort: 5432 envFrom: - configMapRef: name: postgres-config - secretRef: name: postgres-secret readinessProbe: exec: command: - pg_isready - -U - postgres - -d - dogfacts initialDelaySeconds: 5 periodSeconds: 5 timeoutSeconds: 5 failureThreshold: 5 4. exposi\u00e7\u00e3o do servi\u00e7o o postgres foi exposto atrav\u00e9s de um servi\u00e7o do tipo ClusterIP , na porta 5432 a API foi exposta atrav\u00e9s de um LoadBalancer: apiVersion: v1 kind: Service metadata: name: projeto spec: type: LoadBalancer selector: app: projeto ports: - port: 8000 targetPort: 8000 comandos posteriores # checa que os pods est\u00e3o em execu\u00e7\u00e3o kubectl get pods # verifica os servi\u00e7os (postgres e API) kubectl get services # logs do deployment da API kubectl logs deployment/projeto medidas de seguran\u00e7a conta da AWS segura com MFA cluster em VPC isolada roles do IAM com permiss\u00f5es necess\u00e1rias secrets para credenciais do banco de dados network policies para isolamento de recursos demonstra\u00e7\u00e3o","title":"deploy usando kubernetes"},{"location":"aws/deploy/#hosteamento-da-api-na-aws-usando-eks","text":"o deploy da API criada na primeira etapa foi feito atrav\u00e9s da AWS, utilizando-se o EKS (Elastic Kubernetes Service).","title":"hosteamento da API na AWS usando EKS"},{"location":"aws/deploy/#infraestrutura-utilizada","text":"Amazon EKS : servi\u00e7o gerenciado de Kubernetes EC2 : inst\u00e2ncias para os nodes do cluster ELB : load-balancer para distribui\u00e7\u00e3o de tr\u00e1fego IAM : gerenciamento de permiss\u00f5es do cluster","title":"infraestrutura utilizada"},{"location":"aws/deploy/#processo-de-implementacao","text":"voc\u00ea pode baixar os arquivos .yaml de deploy aqui .","title":"processo de implementa\u00e7\u00e3o"},{"location":"aws/deploy/#1-preparacao-do-ambiente","text":"# cria\u00e7\u00e3o do cluster eksctl create cluster \\ --name dogfacts \\ --region us-east-1 \\ --node-type t3.small \\ --nodes 2 \\ --nodes-min 1 \\ --nodes-max 3 \\ --managed","title":"1. prepara\u00e7\u00e3o do ambiente"},{"location":"aws/deploy/#2-deploy-da-aplicacao","text":"a aplica\u00e7\u00e3o foi implantada usando o arquivo api-deploy.yaml : apiVersion: apps/v1 kind: Deployment metadata: name: projeto spec: replicas: 1 selector: matchLabels: app: projeto template: metadata: labels: app: projeto spec: containers: - name: projeto image: brunozalc/apicloud:latest ports: - containerPort: 8000 # readiness test readinessProbe: httpGet: path: / port: 8000 initialDelaySeconds: 10 periodSeconds: 5 # wait for database startupProbe: httpGet: path: / port: 8000 failureThreshold: 30 periodSeconds: 10","title":"2. deploy da aplica\u00e7\u00e3o"},{"location":"aws/deploy/#3-configuracao-do-banco-de-dados","text":"o postgres tamb\u00e9m foi inicializado atrav\u00e9s de um arquivo postgres-deploy.yaml : apiVersion: apps/v1 kind: Deployment metadata: name: postgres spec: replicas: 1 selector: matchLabels: app: postgres template: metadata: labels: app: postgres spec: containers: - name: postgres image: postgres ports: - containerPort: 5432 envFrom: - configMapRef: name: postgres-config - secretRef: name: postgres-secret readinessProbe: exec: command: - pg_isready - -U - postgres - -d - dogfacts initialDelaySeconds: 5 periodSeconds: 5 timeoutSeconds: 5 failureThreshold: 5","title":"3. configura\u00e7\u00e3o do banco de dados"},{"location":"aws/deploy/#4-exposicao-do-servico","text":"o postgres foi exposto atrav\u00e9s de um servi\u00e7o do tipo ClusterIP , na porta 5432 a API foi exposta atrav\u00e9s de um LoadBalancer: apiVersion: v1 kind: Service metadata: name: projeto spec: type: LoadBalancer selector: app: projeto ports: - port: 8000 targetPort: 8000","title":"4. exposi\u00e7\u00e3o do servi\u00e7o"},{"location":"aws/deploy/#comandos-posteriores","text":"# checa que os pods est\u00e3o em execu\u00e7\u00e3o kubectl get pods # verifica os servi\u00e7os (postgres e API) kubectl get services # logs do deployment da API kubectl logs deployment/projeto","title":"comandos posteriores"},{"location":"aws/deploy/#medidas-de-seguranca","text":"conta da AWS segura com MFA cluster em VPC isolada roles do IAM com permiss\u00f5es necess\u00e1rias secrets para credenciais do banco de dados network policies para isolamento de recursos","title":"medidas de seguran\u00e7a"},{"location":"aws/deploy/#demonstracao","text":"","title":"demonstra\u00e7\u00e3o"},{"location":"docker/api/","text":"API a API \u00e9 muito simples, e possui apenas tr\u00eas endpoints . a ideia \u00e9 que, ao final, voc\u00ea consiga us\u00e1-la para ver tr\u00eas fatos aleat\u00f3rios sobre cachorros, quando quiser! \ud83d\udc36 o servi\u00e7o tem um sistema de autentica\u00e7\u00e3o, baseado em json web tokens (jwt) . para que sua requisi\u00e7\u00e3o GET seja aceita, voc\u00ea precisa fornecer um token v\u00e1lido 1. endpoint de registro url: /registrar m\u00e9todo aceito: POST exemplo de requisi\u00e7\u00e3o: { \"name\": \"string\", \"email\": \"user@string.com\", \"password\": \"string\" } exemplo de resposta: { \"access_token\": \"seu_token_jwt\", \"token_type\": \"bearer\" } 2. endpoint de login url: /login m\u00e9todo aceito: POST exemplo de requisi\u00e7\u00e3o: { \"name\": \"string\", \"password\": \"string\" } exemplo de resposta: { \"access_token\": \"seu_token_jwt\", \"token_type\": \"bearer\" } 3. endpoint de consulta a fatos caninos url: /consulta m\u00e9todo aceito: GET exemplo de requisi\u00e7\u00e3o (com token): curl -X 'GET' \\ 'http://localhost:8000/consultar' \\ -H 'accept: application/json' \\ -H 'Authorization: seu_token_jwt' exemplo de resposta: { \"facts\": [ \"fato canino 1\", \"fato canino 2\", \"fato canino 3\" ] } caso voc\u00ea esteja testando a API atrav\u00e9s da documenta\u00e7\u00e3o interativa, \u00e9 necess\u00e1rio que voc\u00ea: copie o token gerado por alguma das requisi\u00e7\u00f5es anteriores aperte o bot\u00e3o \"Authorize\", localizado no canto superior direito da p\u00e1gina insira seu token e fa\u00e7a login v\u00eddeo demonstrando os endpoints","title":"API"},{"location":"docker/api/#api","text":"a API \u00e9 muito simples, e possui apenas tr\u00eas endpoints . a ideia \u00e9 que, ao final, voc\u00ea consiga us\u00e1-la para ver tr\u00eas fatos aleat\u00f3rios sobre cachorros, quando quiser! \ud83d\udc36 o servi\u00e7o tem um sistema de autentica\u00e7\u00e3o, baseado em json web tokens (jwt) . para que sua requisi\u00e7\u00e3o GET seja aceita, voc\u00ea precisa fornecer um token v\u00e1lido","title":"API"},{"location":"docker/api/#1-endpoint-de-registro","text":"url: /registrar m\u00e9todo aceito: POST exemplo de requisi\u00e7\u00e3o: { \"name\": \"string\", \"email\": \"user@string.com\", \"password\": \"string\" } exemplo de resposta: { \"access_token\": \"seu_token_jwt\", \"token_type\": \"bearer\" }","title":"1. endpoint de registro"},{"location":"docker/api/#2-endpoint-de-login","text":"url: /login m\u00e9todo aceito: POST exemplo de requisi\u00e7\u00e3o: { \"name\": \"string\", \"password\": \"string\" } exemplo de resposta: { \"access_token\": \"seu_token_jwt\", \"token_type\": \"bearer\" }","title":"2. endpoint de login"},{"location":"docker/api/#3-endpoint-de-consulta-a-fatos-caninos","text":"url: /consulta m\u00e9todo aceito: GET exemplo de requisi\u00e7\u00e3o (com token): curl -X 'GET' \\ 'http://localhost:8000/consultar' \\ -H 'accept: application/json' \\ -H 'Authorization: seu_token_jwt' exemplo de resposta: { \"facts\": [ \"fato canino 1\", \"fato canino 2\", \"fato canino 3\" ] } caso voc\u00ea esteja testando a API atrav\u00e9s da documenta\u00e7\u00e3o interativa, \u00e9 necess\u00e1rio que voc\u00ea: copie o token gerado por alguma das requisi\u00e7\u00f5es anteriores aperte o bot\u00e3o \"Authorize\", localizado no canto superior direito da p\u00e1gina insira seu token e fa\u00e7a login","title":"3. endpoint de consulta a fatos caninos"},{"location":"docker/api/#video-demonstrando-os-endpoints","text":"","title":"v\u00eddeo demonstrando os endpoints"},{"location":"docker/uso/","text":"instala\u00e7\u00e3o e uso do cont\u00e2iner a aplica\u00e7\u00e3o pode ser rodada facilmente atrav\u00e9s da interface do Docker e do DockerHub. pr\u00e9-requisitos para rodar o projeto, voc\u00ea ir\u00e1 precisar de: docker e docker compose instalados na sua m\u00e1quina o arquivo compose.yml git (opcional) instala\u00e7\u00e3o baixe o arquivo compose.yml : compose.yml document.addEventListener(\"DOMContentLoaded\", function() { document.getElementById('downloadLink').addEventListener('click', function(event) { event.preventDefault(); const url = this.href; const fileName = 'compose.yml'; fetch(url) .then(response => response.blob()) .then(blob => { const link = document.createElement('a'); link.href = window.URL.createObjectURL(blob); link.download = fileName; link.click(); window.URL.revokeObjectURL(link.href); }) .catch(() => alert('Falha ao baixar o arquivo.')); }); }); ou clone o reposit\u00f3rio do projeto no seu computador: git clone https://github.com/brunozalc/projeto-cloud.git uso abra um terminal ou prompt de comando no mesmo local em que voc\u00ea armazenou o compose.yml ou o reposit\u00f3rio, e inicie a API: docker compose up espere alguns segundos, e a API ficar\u00e1 dispon\u00edvel em http://localhost:8080 voc\u00ea pode ver a documenta\u00e7\u00e3o dos endpoints da API em http://localhost:8080/docs , al\u00e9m de test\u00e1-los interativamente! finaliza\u00e7\u00e3o para finalizar a execu\u00e7\u00e3o da API, rode no terminal: docker compose dowm","title":"download e uso"},{"location":"docker/uso/#instalacao-e-uso-do-container","text":"a aplica\u00e7\u00e3o pode ser rodada facilmente atrav\u00e9s da interface do Docker e do DockerHub.","title":"instala\u00e7\u00e3o e uso do cont\u00e2iner"},{"location":"docker/uso/#pre-requisitos","text":"para rodar o projeto, voc\u00ea ir\u00e1 precisar de: docker e docker compose instalados na sua m\u00e1quina o arquivo compose.yml git (opcional)","title":"pr\u00e9-requisitos"},{"location":"docker/uso/#instalacao","text":"baixe o arquivo compose.yml : compose.yml document.addEventListener(\"DOMContentLoaded\", function() { document.getElementById('downloadLink').addEventListener('click', function(event) { event.preventDefault(); const url = this.href; const fileName = 'compose.yml'; fetch(url) .then(response => response.blob()) .then(blob => { const link = document.createElement('a'); link.href = window.URL.createObjectURL(blob); link.download = fileName; link.click(); window.URL.revokeObjectURL(link.href); }) .catch(() => alert('Falha ao baixar o arquivo.')); }); }); ou clone o reposit\u00f3rio do projeto no seu computador: git clone https://github.com/brunozalc/projeto-cloud.git","title":"instala\u00e7\u00e3o"},{"location":"docker/uso/#uso","text":"abra um terminal ou prompt de comando no mesmo local em que voc\u00ea armazenou o compose.yml ou o reposit\u00f3rio, e inicie a API: docker compose up espere alguns segundos, e a API ficar\u00e1 dispon\u00edvel em http://localhost:8080 voc\u00ea pode ver a documenta\u00e7\u00e3o dos endpoints da API em http://localhost:8080/docs , al\u00e9m de test\u00e1-los interativamente!","title":"uso"},{"location":"docker/uso/#finalizacao","text":"para finalizar a execu\u00e7\u00e3o da API, rode no terminal: docker compose dowm","title":"finaliza\u00e7\u00e3o"}]}